{"version":3,"sources":["logo.png","component/main.js","component/detail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAIN","props","taskSelected","task","setState","search","split","selected","task_res","datasets","state","handleInputChange","bind","event","target","value","name","this","dataset_name_list","length","searchPattern","RegExp","map","term","join","Object","keys","filter","option","match","id","className","type","onChange","e","key","index","onClick","src","alt","React","Component","DETAIL","dataset_id","dataset","url","process","href","text","language","showLineNumbers","theme","github","rel","App","selected_id","logo","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c645e2fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b9a5829f.png\";","import React from 'react';\nimport '../App.css';\n\nclass MAIN extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const {selected, task_res, datasets} = this.props\n        this.selected = selected\n        this.datasets = datasets\n        this.task_res = task_res\n\n        this.state = {\n            search: []\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.taskSelected = this.taskSelected.bind(this)\n    }\n\n    taskSelected = (task) => {\n        this.setState({\n            search: task.split(' ')\n        });\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n    }\n\n\n    render() {\n        let dataset_name_list;\n        if (this.state.search.length) {\n            const searchPattern = new RegExp(this.state.search.map(term => `(?=.*${term})`).join(''), 'i');\n            dataset_name_list = Object.keys(this.datasets).filter(option =>\n                option.match(searchPattern)\n            );\n        } else {\n            dataset_name_list = Object.keys(this.datasets);\n        }\n\n        return (\n            <div id=\"main\">\n                <article className=\"post\">\n                    <header>\n                        <div className=\"title\">\n                            <h2>Search for datasets</h2>\n                            <input type=\"text\" name={\"query\"}\n                                   onChange={(e) => this.setState({search: e.target.value.split(' ')})}/>\n                            <br/>\n                            <div className=\"posts\">\n                                {this.task_res['list'].map((key, index) => (\n                                    <div key={key + index} onClick={() => this.taskSelected(key+\"_\")}>\n                                        <div className=\"author\">\n                                            <img\n                                                src={this.task_res['tag2img'][key]} alt={key}/>\n                                            <span className=\"name\">{this.task_res['tag2name'][key]}</span>\n\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </header>\n\n                    <div className=\"mini-posts\">\n                        {dataset_name_list.map((key, index) => (\n                            <article className=\"mini-post\" key={key + index} onClick={() => this.selected(key)}>\n                                <header>\n                                    <h3>{key}</h3>\n                                    <time className=\"published\">{this.task_res['tag2name'][this.datasets[key]['task']]}</time>\n                                    <div className=\"author\"><img alt={key} src={this.task_res['tag2img'][this.datasets[key]['task']]}/></div>\n                                </header>\n                            </article>\n                        ))}\n                    </div>\n\n                </article>\n            </div>\n        );\n    }\n}\n\nexport default MAIN;\n","import React from 'react';\nimport '../App.css';\nimport Iframe from 'react-iframe'\nimport {CodeBlock, github} from \"react-code-blocks\";\n\nclass DETAIL extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const {dataset_id, task_res, datasets} = this.props\n        this.task_res = task_res\n        this.dataset_id = dataset_id\n        this.dataset = datasets[dataset_id]\n    }\n\n    render() {\n        return (\n            <div id=\"dataset\">\n                <section id=\"main\">\n                    <Iframe\n                        url={process.env.PUBLIC_URL+'/reports/' + this.dataset['filename'] + '_report.html'}\n                    />\n                </section>\n\n                <section id=\"sidebar\">\n                    <section id=\"intro\">\n                        <header>\n                            <h2>{this.dataset_id}</h2>\n                            <p>{this.dataset['fullname']}</p>\n                            <p>{this.task_res['tag2name'][this.dataset['task']]}</p>\n                            <a href=\"https://github.com/voidful/NLPrep\">https://github.com/voidful/NLPrep</a>\n                        </header>\n                    </section>\n\n                    <section>\n                        <h2>Description</h2>\n                        <p>\n                            {this.dataset['description']}\n                        </p>\n                    </section>\n                    <section className=\"blurb\">\n                        <h2>Usage</h2>\n                        <div id=\"python\">\n                            Python\n                        </div>\n                        <CodeBlock\n                            text={\"import nlprep\\n\" +\n                            \"ds = nlprep.load_dataset('\" + this.dataset['id'] + \"')\\n\" +\n                            \"for ds_name, mf in nlprep.convert_middleformat(ds).items():\\n\" +\n                            \"   print(ds_name, mf.dump_list()[:10])\"}\n                            language={'python'}\n                            showLineNumbers={false}\n                            theme={github}\n                        />\n                        <br/>\n                        <div>\n                            BASH\n                        </div>\n                        <div id=\"bash\">\n                            <CodeBlock\n                                text={\"!pip install nlprep\\n\" +\n                                \"nlprep\\\\\\n\" +\n                                \"--dataset      \" + this.dataset['id'] + \"\\\\\\n\" +\n                                \"--outdir       #path, string\\n\" +\n                                \"optional arguments:\\n\" +\n                                \"--util         #utility name,string\\n\" +\n                                \"--cachedir     #path,string\\n\" +\n                                \"--report       #bool\"}\n                                language={'text'}\n                                showLineNumbers={false}\n                                theme={github}\n                            />\n                            <br/>\n                        </div>\n                        <div>Tools</div>\n                        <ul>\n                            <li>\n                                <a href=\"https://github.com/voidful/NLPrep\" target=\"_blank\" rel=\"noopener noreferrer\">DATA\n                                    DOWNLOAD - NLPrep</a>\n                            </li>\n                            <li>\n                                <a href=\"https://github.com/voidful/TFkit\" target=\"_blank\" rel=\"noopener noreferrer\">TRAIN\n                                    MODEL - TFKit</a>\n                            </li>\n                            <li>\n                                <a href=\"https://github.com/voidful/nlp2go\" target=\"_blank\" rel=\"noopener noreferrer\">HOST\n                                    MODEL - NLP2GO</a>\n                            </li>\n                        </ul>\n\n                    </section>\n\n                    <section>\n                        <h2>Reference</h2>\n                        <ul className=\"posts\">\n                            {Object.keys(this.dataset['ref']).map((key, index) => (\n                                <li key={key + index}>\n                                    <article>\n                                        <header>\n                                            <h3>\n                                                {key}\n                                            </h3>\n                                            <time className=\"published\">\n                                                {this.dataset['ref'][key]}\n                                            </time>\n                                        </header>\n                                    </article>\n                                </li>\n                            ))}\n                        </ul>\n                    </section>\n\n\n                    <section id=\"footer\">\n                        <p className=\"copyright\">&copy; voidful.\n                            Design: <a href=\"http://html5up.net\">HTML5 UP</a>.\n                        </p>\n                    </section>\n\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default DETAIL;\n","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport MAIN from \"./component/main\";\nimport DETAIL from \"./component/detail\";\nimport datasets from './assets/datasets.json';\n\nclass App extends React.Component {\n\n    task_res = {\n        'list': ['tag', 'clas', 'gen', 'qa'], 'tag2name': {\n            'tag': 'Tagging',\n            'qa': 'Question Answering',\n            'gen': \"Generation\",\n            'clas': 'Classification'\n        }, 'tag2img': {\n            'tag': 'images/tag_icon.jpg',\n            'clas': 'images/clas_icon.jpg',\n            'gen': 'images/gen_icon.jpg',\n            'qa': 'images/qa_icon.jpg',\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected_id: ''\n        }\n        this.selected = this.selected.bind(this)\n    }\n\n    selected(id) {\n        this.setState({selected_id: id});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div id=\"wrapper\">\n                        <header id=\"header\">\n                            <h1>\n                                <a href=\"index.html\"><img alt=\"logo\" src={logo} href=\"index.html\"/>NLPrep Datasets</a>\n                            </h1>\n                        </header>\n                        {this.state.selected_id.length < 1 && (\n                            <MAIN selected={this.selected}\n                                  datasets={datasets}\n                                  task_res={this.task_res}/>\n                        )}\n                        {this.state.selected_id.length > 0 && (\n                            <DETAIL dataset_id={this.state.selected_id}\n                                    datasets={datasets}\n                                    task_res={this.task_res}/>\n                        )}\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}